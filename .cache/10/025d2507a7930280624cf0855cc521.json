{"id":"../node_modules/brain.js/dist/recurrent/matrix/sample-i.js","dependencies":[{"name":"/home/douglas/Desktop/Recurse Center/Toki Toki/node_modules/brain.js/dist/recurrent/matrix/sample-i.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/douglas/Desktop/Recurse Center/Toki Toki/package.json","includedInParent":true,"mtime":1549060270259},{"name":"/home/douglas/Desktop/Recurse Center/Toki Toki/node_modules/brain.js/package.json","includedInParent":true,"mtime":1549057497863},{"name":"../../utilities/random","loc":{"line":8,"column":22},"parent":"/home/douglas/Desktop/Recurse Center/Toki Toki/node_modules/brain.js/dist/recurrent/matrix/sample-i.js","resolved":"/home/douglas/Desktop/Recurse Center/Toki Toki/node_modules/brain.js/dist/utilities/random.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sampleI;\n\nvar _random = require('../../utilities/random');\n\n//prevent parser from renaming when calling toString() method later\nvar randomF = _random.randomF;\n/**\n *\n * @param {Matrix} m\n * @returns {number}\n */\nfunction sampleI(m) {\n  // sample argmax from w, assuming w are\n  // probabilities that sum to one\n  var r = randomF(0, 1);\n  var x = 0;\n  var i = 0;\n  var w = m.weights;\n\n  while (true) {\n    x += w[i];\n    if (x > r) {\n      return i;\n    }\n    i++;\n  }\n}\n","map":{"version":3,"sources":["../../../src/recurrent/matrix/sample-i.js"],"names":["sampleI","randomF","_randomF","m","r","x","i","w","weights"],"mappings":";;;;;kBASwBA,O;;AATxB;;AAEA;AACA,IAAMC,UAAUC,eAAhB;AACA;;;;;AAKe,SAASF,OAAT,CAAiBG,CAAjB,EAAoB;AACjC;AACA;AACA,MAAIC,IAAIH,QAAQ,CAAR,EAAW,CAAX,CAAR;AACA,MAAII,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAIJ,EAAEK,OAAV;;AAEA,SAAO,IAAP,EAAa;AACXH,SAAKE,EAAED,CAAF,CAAL;AACA,QAAGD,IAAID,CAAP,EAAU;AACR,aAAOE,CAAP;AACD;AACDA;AACD;AACF","file":"sample-i.js","sourcesContent":["import { randomF as _randomF } from '../../utilities/random';\n\n//prevent parser from renaming when calling toString() method later\nconst randomF = _randomF;\n/**\n *\n * @param {Matrix} m\n * @returns {number}\n */\nexport default function sampleI(m) {\n  // sample argmax from w, assuming w are\n  // probabilities that sum to one\n  let r = randomF(0, 1);\n  let x = 0;\n  let i = 0;\n  let w = m.weights;\n\n  while (true) {\n    x += w[i];\n    if(x > r) {\n      return i;\n    }\n    i++;\n  }\n}"]}},"hash":"82ec4cd97a2354f0bf1505d52686ecba","cacheData":{"env":{}}}